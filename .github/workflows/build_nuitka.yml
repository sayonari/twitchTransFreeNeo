name: Build twitchTransFreeNeo with Nuitka

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build_matrix:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: macos_arm64
            artifact: twitchTransFreeNeo_macos_arm64
          - os: macos-13
            target: macos_x86_64
            artifact: twitchTransFreeNeo_macos_x86_64
          - os: windows-latest
            target: windows
            artifact: twitchTransFreeNeo_windows
          - os: ubuntu-latest
            target: linux
            artifact: twitchTransFreeNeo_linux

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --frozen

      - name: Get Version
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep "__version__" twitchTransFreeNeo/__init__.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version detected: $VERSION"

      - name: Build with Nuitka
        env:
          PYTHONIOENCODING: utf-8
        run: uv run python build_nuitka.py ${{ matrix.target }}

      - name: Create Archive (macOS)
        if: runner.os == 'macOS'
        run: |
          cd dist
          # macOS .appバンドルをzipで圧縮
          if [ -d "run.app" ]; then
            zip -r -q ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.zip run.app
            echo "Created archive: ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.zip"
            ls -lh *.zip
          fi

      - name: Create Archive (Linux)
        if: runner.os == 'Linux'
        run: |
          cd dist
          # Linuxバイナリをtar.gzで圧縮
          if [ -d "run.dist" ] && [ -f "run.dist/twitchTransFreeNeo" ]; then
            tar -czvf ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.tar.gz -C run.dist twitchTransFreeNeo
            echo "Created archive: ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.tar.gz"
            ls -lh *.tar.gz
          fi

      - name: Create Archive (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd dist
          # Windows単体.exeをそのまま使用（zipは不要）
          if (Test-Path "twitchTransFreeNeo.exe") {
            # .exeをリネーム
            Move-Item -Path twitchTransFreeNeo.exe -Destination ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.exe
            echo "Created executable: ${{ matrix.artifact }}_${{ steps.get_version.outputs.version }}.exe"
            Get-ChildItem *.exe
          }

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: true
          make_latest: false  # Pre-releaseはlatestにしない
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.exe
          fail_on_unmatched_files: false
