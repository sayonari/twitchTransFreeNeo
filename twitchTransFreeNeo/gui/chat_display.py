#!/usr/bin/env python
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from datetime import datetime
from typing import Dict, Any, List, Optional
import asyncio
try:
    from ..core.chat_monitor import ChatMessage
except ImportError:
    from twitchTransFreeNeo.core.chat_monitor import ChatMessage

class ChatDisplayWidget(ttk.Frame):
    """チャット表示ウィジェット"""
    
    def __init__(self, parent, config: Dict[str, Any]):
        super().__init__(parent)
        self.config = config
        self.messages: List[ChatMessage] = []
        self.max_messages = 1000
        self._create_widgets()
        self._setup_styling()
    
    def _create_widgets(self):
        """ウィジェット作成"""
        # フレーム構成
        control_frame = ttk.Frame(self)
        control_frame.pack(fill='x', padx=5, pady=5)
        
        # コントロール
        ttk.Label(control_frame, text="チャット表示").pack(side='left')
        
        # 検索フレーム
        search_frame = ttk.Frame(control_frame)
        search_frame.pack(side='right')\n        \n        ttk.Label(search_frame, text="検索:").pack(side='left', padx=2)\n        self.search_var = tk.StringVar()\n        self.search_var.trace('w', self._on_search_change)\n        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=20)\n        search_entry.pack(side='left', padx=2)\n        \n        ttk.Button(search_frame, text="クリア", command=self.clear_messages).pack(side='left', padx=2)\n        \n        # フィルターオプション\n        filter_frame = ttk.Frame(self)\n        filter_frame.pack(fill='x', padx=5, pady=2)\n        \n        self.show_original_var = tk.BooleanVar(value=True)\n        ttk.Checkbutton(filter_frame, text="原文表示", variable=self.show_original_var, \n                       command=self._update_display).pack(side='left', padx=5)\n        \n        self.show_translated_var = tk.BooleanVar(value=True)\n        ttk.Checkbutton(filter_frame, text="翻訳文表示", variable=self.show_translated_var, \n                       command=self._update_display).pack(side='left', padx=5)\n        \n        self.auto_scroll_var = tk.BooleanVar(value=True)\n        ttk.Checkbutton(filter_frame, text="自動スクロール", variable=self.auto_scroll_var).pack(side='left', padx=5)\n        \n        # 言語フィルター\n        ttk.Label(filter_frame, text="言語:").pack(side='left', padx=(20, 2))\n        self.lang_filter_var = tk.StringVar(value="全て")\n        lang_combo = ttk.Combobox(filter_frame, textvariable=self.lang_filter_var, width=8)\n        lang_combo['values'] = ['全て', 'ja', 'en', 'ko', 'zh-CN', 'zh-TW', 'fr', 'de', 'es']\n        lang_combo.bind('<<ComboboxSelected>>', lambda e: self._update_display())\n        lang_combo.pack(side='left', padx=2)\n        \n        # メインチャット表示エリア\n        chat_frame = ttk.Frame(self)\n        chat_frame.pack(fill='both', expand=True, padx=5, pady=5)\n        \n        # スクロール可能テキストエリア\n        self.chat_text = scrolledtext.ScrolledText(\n            chat_frame, \n            wrap=tk.WORD, \n            state=tk.DISABLED,\n            height=20,\n            font=(\"Consolas\", self.config.get(\"font_size\", 12))\n        )\n        self.chat_text.pack(fill='both', expand=True)\n        \n        # 統計情報フレーム\n        stats_frame = ttk.Frame(self)\n        stats_frame.pack(fill='x', padx=5, pady=2)\n        \n        self.stats_label = ttk.Label(stats_frame, text="メッセージ: 0件\")\n        self.stats_label.pack(side='left')\n        \n        # 右クリックメニュー\n        self._create_context_menu()\n    \n    def _setup_styling(self):\n        \"\"\"スタイリング設定\"\"\"\n        # テキストタグ設定\n        self.chat_text.tag_configure(\"username\", foreground=\"#0066CC\", font=(\"Consolas\", self.config.get(\"font_size\", 12), \"bold\"))\n        self.chat_text.tag_configure(\"timestamp\", foreground=\"#666666\", font=(\"Consolas\", self.config.get(\"font_size\", 12) - 1))\n        self.chat_text.tag_configure(\"original\", foreground=\"#333333\")\n        self.chat_text.tag_configure(\"translated\", foreground=\"#006600\", font=(\"Consolas\", self.config.get(\"font_size\", 12), \"italic\"))\n        self.chat_text.tag_configure(\"lang_info\", foreground=\"#996633\", font=(\"Consolas\", self.config.get(\"font_size\", 12) - 2))\n        self.chat_text.tag_configure(\"separator\", foreground=\"#CCCCCC\")\n        \n        # テーマ適用\n        self._apply_theme()\n    \n    def _apply_theme(self):\n        \"\"\"テーマ適用\"\"\"\n        theme = self.config.get(\"theme\", \"light\")\n        \n        if theme == \"dark\":\n            self.chat_text.configure(\n                bg=\"#2b2b2b\",\n                fg=\"#ffffff\",\n                insertbackground=\"#ffffff\",\n                selectbackground=\"#404040\"\n            )\n            self.chat_text.tag_configure(\"username\", foreground=\"#66B2FF\")\n            self.chat_text.tag_configure(\"timestamp\", foreground=\"#999999\")\n            self.chat_text.tag_configure(\"original\", foreground=\"#ffffff\")\n            self.chat_text.tag_configure(\"translated\", foreground=\"#66FF66\")\n            self.chat_text.tag_configure(\"lang_info\", foreground=\"#FFB366\")\n            self.chat_text.tag_configure(\"separator\", foreground=\"#555555\")\n        else:\n            self.chat_text.configure(\n                bg=\"#ffffff\",\n                fg=\"#000000\",\n                insertbackground=\"#000000\",\n                selectbackground=\"#3399FF\"\n            )\n    \n    def _create_context_menu(self):\n        \"\"\"右クリックメニュー作成\"\"\"\n        self.context_menu = tk.Menu(self, tearoff=0)\n        self.context_menu.add_command(label=\"コピー\", command=self._copy_selection)\n        self.context_menu.add_command(label=\"全選択\", command=self._select_all)\n        self.context_menu.add_separator()\n        self.context_menu.add_command(label=\"フォントサイズ +\", command=self._increase_font)\n        self.context_menu.add_command(label=\"フォントサイズ -\", command=self._decrease_font)\n        self.context_menu.add_separator()\n        self.context_menu.add_command(label=\"履歴をファイルに保存\", command=self._export_to_file)\n        \n        self.chat_text.bind(\"<Button-3>\", self._show_context_menu)\n    \n    def _show_context_menu(self, event):\n        \"\"\"右クリックメニュー表示\"\"\"\n        try:\n            self.context_menu.tk_popup(event.x_root, event.y_root)\n        finally:\n            self.context_menu.grab_release()\n    \n    def _copy_selection(self):\n        \"\"\"選択テキストをコピー\"\"\"\n        try:\n            selected_text = self.chat_text.selection_get()\n            self.clipboard_clear()\n            self.clipboard_append(selected_text)\n        except tk.TclError:\n            pass\n    \n    def _select_all(self):\n        \"\"\"全選択\"\"\"\n        self.chat_text.tag_add(tk.SEL, \"1.0\", tk.END)\n        self.chat_text.mark_set(tk.INSERT, \"1.0\")\n        self.chat_text.see(tk.INSERT)\n    \n    def _increase_font(self):\n        \"\"\"フォントサイズ増加\"\"\"\n        current_size = self.config.get(\"font_size\", 12)\n        new_size = min(current_size + 1, 24)\n        self._update_font_size(new_size)\n    \n    def _decrease_font(self):\n        \"\"\"フォントサイズ減少\"\"\"\n        current_size = self.config.get(\"font_size\", 12)\n        new_size = max(current_size - 1, 8)\n        self._update_font_size(new_size)\n    \n    def _update_font_size(self, size: int):\n        \"\"\"フォントサイズ更新\"\"\"\n        self.config[\"font_size\"] = size\n        font = (\"Consolas\", size)\n        self.chat_text.configure(font=font)\n        # タグも更新\n        self._setup_styling()\n    \n    def _export_to_file(self):\n        \"\"\"履歴をファイルに保存\"\"\"\n        from tkinter import filedialog\n        \n        filename = filedialog.asksaveasfilename(\n            defaultextension=\".txt\",\n            filetypes=[(\"テキストファイル\", \"*.txt\"), (\"全てのファイル\", \"*.*\")],\n            title=\"チャット履歴を保存\"\n        )\n        \n        if filename:\n            try:\n                with open(filename, 'w', encoding='utf-8') as f:\n                    f.write(self.chat_text.get(\"1.0\", tk.END))\n                messagebox.showinfo(\"保存完了\", f\"チャット履歴を {filename} に保存しました\")\n            except Exception as e:\n                messagebox.showerror(\"保存エラー\", f\"ファイル保存に失敗しました: {e}\")\n    \n    def _on_search_change(self, *args):\n        \"\"\"検索文字列変更時\"\"\"\n        self._highlight_search()\n    \n    def _highlight_search(self):\n        \"\"\"検索文字列をハイライト\"\"\"\n        # 既存のハイライトを削除\n        self.chat_text.tag_remove(\"search_highlight\", \"1.0\", tk.END)\n        \n        search_term = self.search_var.get()\n        if not search_term:\n            return\n        \n        # 検索語をハイライト\n        start = \"1.0\"\n        while True:\n            pos = self.chat_text.search(search_term, start, tk.END, nocase=True)\n            if not pos:\n                break\n            \n            end = f\"{pos}+{len(search_term)}c\"\n            self.chat_text.tag_add(\"search_highlight\", pos, end)\n            start = end\n        \n        # ハイライトスタイル\n        self.chat_text.tag_configure(\"search_highlight\", background=\"yellow\", foreground=\"black\")\n    \n    def add_message(self, message: ChatMessage):\n        \"\"\"メッセージを追加\"\"\"\n        self.messages.append(message)\n        \n        # 最大件数チェック\n        if len(self.messages) > self.max_messages:\n            self.messages = self.messages[-self.max_messages:]\n            self._update_display()\n        else:\n            self._add_message_to_display(message)\n        \n        # 統計更新\n        self._update_stats()\n        \n        # 自動スクロール\n        if self.auto_scroll_var.get():\n            self.chat_text.see(tk.END)\n    \n    def _add_message_to_display(self, message: ChatMessage):\n        \"\"\"表示エリアにメッセージを追加\"\"\"\n        if not self._should_show_message(message):\n            return\n        \n        self.chat_text.configure(state=tk.NORMAL)\n        \n        # タイムスタンプとユーザー名\n        self.chat_text.insert(tk.END, f\"[{message.timestamp}] \", \"timestamp\")\n        self.chat_text.insert(tk.END, f\"{message.username}: \", \"username\")\n        \n        # 原文表示\n        if self.show_original_var.get():\n            self.chat_text.insert(tk.END, f\"{message.content}\", \"original\")\n            if message.is_translated and self.show_translated_var.get():\n                self.chat_text.insert(tk.END, \"\\n    → \", \"separator\")\n        \n        # 翻訳文表示\n        if message.is_translated and self.show_translated_var.get():\n            self.chat_text.insert(tk.END, f\"{message.translated}\", \"translated\")\n            if message.lang and message.target_lang:\n                self.chat_text.insert(tk.END, f\" ({message.lang} → {message.target_lang})\", \"lang_info\")\n        \n        self.chat_text.insert(tk.END, \"\\n\\n\")\n        self.chat_text.configure(state=tk.DISABLED)\n    \n    def _should_show_message(self, message: ChatMessage) -> bool:\n        \"\"\"メッセージを表示すべきかチェック\"\"\"\n        # 言語フィルター\n        lang_filter = self.lang_filter_var.get()\n        if lang_filter != \"全て\" and message.lang != lang_filter:\n            return False\n        \n        # 検索フィルター\n        search_term = self.search_var.get().lower()\n        if search_term:\n            if (search_term not in message.content.lower() and \n                search_term not in message.translated.lower() and \n                search_term not in message.username.lower()):\n                return False\n        \n        return True\n    \n    def _update_display(self):\n        \"\"\"表示を更新\"\"\"\n        self.chat_text.configure(state=tk.NORMAL)\n        self.chat_text.delete(\"1.0\", tk.END)\n        \n        for message in self.messages:\n            self._add_message_to_display(message)\n        \n        self.chat_text.configure(state=tk.DISABLED)\n        \n        # 検索ハイライト更新\n        self._highlight_search()\n        \n        # 自動スクロール\n        if self.auto_scroll_var.get():\n            self.chat_text.see(tk.END)\n    \n    def _update_stats(self):\n        \"\"\"統計情報を更新\"\"\"\n        total = len(self.messages)\n        translated = sum(1 for msg in self.messages if msg.is_translated)\n        \n        stats_text = f\"メッセージ: {total}件 (翻訳済み: {translated}件)\"\n        self.stats_label.configure(text=stats_text)\n    \n    def clear_messages(self):\n        \"\"\"メッセージをクリア\"\"\"\n        if messagebox.askyesno(\"確認\", \"チャット履歴をクリアしますか？\"):\n            self.messages.clear()\n            self.chat_text.configure(state=tk.NORMAL)\n            self.chat_text.delete(\"1.0\", tk.END)\n            self.chat_text.configure(state=tk.DISABLED)\n            self._update_stats()\n    \n    def update_config(self, config: Dict[str, Any]):\n        \"\"\"設定更新\"\"\"\n        self.config.update(config)\n        self._apply_theme()\n        self._update_font_size(config.get(\"font_size\", 12))\n    \n    def get_message_count(self) -> int:\n        \"\"\"メッセージ件数を取得\"\"\"\n        return len(self.messages)\n    \n    def get_filtered_messages(self) -> List[ChatMessage]:\n        \"\"\"フィルター済みメッセージを取得\"\"\"\n        return [msg for msg in self.messages if self._should_show_message(msg)]


class StatusBar(ttk.Frame):\n    \"\"\"ステータスバー\"\"\"\n    \n    def __init__(self, parent):\n        super().__init__(parent)\n        self._create_widgets()\n    \n    def _create_widgets(self):\n        \"\"\"ウィジェット作成\"\"\"\n        # 接続状態\n        self.connection_label = ttk.Label(self, text=\"未接続\", foreground=\"red\")\n        self.connection_label.pack(side='left', padx=5)\n        \n        # セパレータ\n        ttk.Separator(self, orient='vertical').pack(side='left', fill='y', padx=5)\n        \n        # 翻訳エンジン状態\n        self.translator_label = ttk.Label(self, text=\"翻訳エンジン: 停止中\")\n        self.translator_label.pack(side='left', padx=5)\n        \n        # セパレータ\n        ttk.Separator(self, orient='vertical').pack(side='left', fill='y', padx=5)\n        \n        # メッセージ統計\n        self.message_stats_label = ttk.Label(self, text=\"メッセージ: 0件\")\n        self.message_stats_label.pack(side='left', padx=5)\n        \n        # 右側に時刻表示\n        self.time_label = ttk.Label(self, text=\"\")\n        self.time_label.pack(side='right', padx=5)\n        \n        # 時刻更新\n        self._update_time()\n    \n    def _update_time(self):\n        \"\"\"時刻更新\"\"\"\n        current_time = datetime.now().strftime(\"%H:%M:%S\")\n        self.time_label.configure(text=current_time)\n        self.after(1000, self._update_time)\n    \n    def set_connection_status(self, connected: bool, channel: str = \"\"):\n        \"\"\"接続状態を設定\"\"\"\n        if connected:\n            self.connection_label.configure(text=f\"接続中: {channel}\", foreground=\"green\")\n        else:\n            self.connection_label.configure(text=\"未接続\", foreground=\"red\")\n    \n    def set_translator_status(self, engine: str, status: str):\n        \"\"\"翻訳エンジン状態を設定\"\"\"\n        self.translator_label.configure(text=f\"翻訳エンジン: {engine} ({status})\")\n    \n    def set_message_stats(self, total: int, translated: int):\n        \"\"\"メッセージ統計を設定\"\"\"\n        self.message_stats_label.configure(text=f\"メッセージ: {total}件 (翻訳済み: {translated}件)\")